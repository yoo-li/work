<?php
    session_start();
    require_once(dirname(__FILE__)."/../include/config.inc.php");
    require_once(dirname(__FILE__)."/../include/config.common.php");
    require_once(dirname(__FILE__)."/../include/utils.php");
//    $_SERVER["HTTP_X_NING_LOCAL_API_HOST_PORT"] = "124.232.138.107:8000";
//    XN_REST::$LOCAL_API_HOST_PORT               = $_SERVER['HTTP_X_NING_LOCAL_API_HOST_PORT'];
    $record                                     = $_REQUEST["record"];
    $ma_saleorders_no                           = $_REQUEST["no"];
    $profileid                                  = $_REQUEST["profileid"];
    $suppliername= $_REQUEST["suppliername"];

    $instorage_info    = XN_Content::load($record, "ma_borrowincheckstorage");
    $ma_borrowordersout     = $instorage_info->my->ma_borrowordersout;
    $ma_borrowordersin      = $instorage_info->my->ma_borrowordersin;
    $submit_id            = $instorage_info->my->submit_id;//供货者
    $submit_info          = XN_Content::load($submit_id, "ma_suppliers");
    $submit_relation_info = XN_Content::load($submit_info->my->relation_id, $submit_info->my->suppliertype);
    $isnew                = $submit_relation_info->my->takepartin;
    $returnordersin_info          = XN_Content::load($ma_borrowordersin, "ma_borrowordersin");
    $purchasenum=$returnordersin_info->my->number;
    $saleoutinfo          = [];
    $totalnum             = 0;
    $checkorders          = XN_Query::create("Content")
        ->tag("ma_checkorders")
        ->filter("type", "eic", "ma_checkorders")
        ->filter("my.forcheckstatus", "=", "1")
        ->filter("my.record", "=", $record)
        ->filter("my.deleted", "=", "0")
        ->order('published', XN_Order::DESC)
        ->end(1)
        ->execute();
    if (count($checkorders) > 0)
    {
        foreach ($checkorders as $checkorder)
        {
            $detailsorders = XN_Query::create("Content")
                ->tag("ma_checkdetails")
                ->filter("type", "eic", "ma_checkdetails")
                ->filter("my.record", "=", $checkorder->id)
                ->filter("my.deleted", "=", "0")
                ->order('published', XN_Order::DESC)
                ->execute();
            if (count($detailsorders) > 0)
            {
                //扫码确认未收货记录
                foreach ($detailsorders as $key => $info)
                {
                    $query=XN_Query::create("Content")
                        ->tag("wcs_warehouselocationsproducts")
                        ->filter("type","eic","wcs_warehouselocationsproducts")
                        ->filter("my.productid","=",$info->my->ma_products)
                        ->filter("my.deleted","=","0")
                        ->order('published',XN_Order::ASC)
                        ->end(-1)
                        ->execute();
                    $warehouse = array();
                    foreach($query as $queryinfo)
                    {
                        $warehouse[] = $queryinfo->my->record;
                    }
                    $warehouseinfo = "";
                    if(count($warehouse)>0){
                        foreach(array_chunk($warehouse,50,true) as $thunk){
                            $whl = XN_Content::loadMany($thunk,"wcs_warehouselocations");
                            foreach($whl as $item){
                                if($warehouseinfo != ""){
                                    $warehouseinfo .= "<br>";
                                }
                                $warehouseinfo .= $item->my->barcode;
                            }
                        }
                    }
                    if($warehouseinfo==""){
                        $warehouseinfo="<未设置>";
                    }
                        $num           = $info->my->sendnumber;
                    $products_info = XN_Content::load($info->my->ma_products, "ma_products");
                    $saleoutinfo[] = ['suppliername'  => $suppliername,
                                      'productname'   => $info->my->productname,
                                      'barcode'       => $products_info->my->barcode,
                                      'itemcode'      => $products_info->my->itemcode,
                                      'guige'         => $info->my->guige,
                                      'unit'          => $info->my->unit,
                                      'registercode'  => $info->my->registercode,
                                      'factorys_name' => $info->my->factorys_name,
                                      'number'        => $num,
                                      'id'            => $info->id,
                                      'warehouseinfo'=>$warehouseinfo,
                                      'batch_info'    => json_decode($info->my->batch_info, true),
                    ];
                    $totalnum += $num;
                }
            }
        }
    }
    else
    {
        $checkorder_info                             = XN_Content::create("ma_checkorders", "", false);
        $checkorder_info->my->record                 = $record;
        $checkorder_info->my->ma_borrowordersout     = $ma_borrowordersout;
        $checkorder_info->my->ma_borrowordersin      = $ma_borrowordersin;
        $checkorder_info->my->backnumber             = 0;
        $checkorder_info->my->refusenumber           = 0;
        $checkorder_info->my->createnew              = 0;
        $checkorder_info->my->approvalstatus         = 0;
        $checkorder_info->my->instorestatus          = 1;
        $checkorder_info->my->checkstatus            = 1;
        $checkorder_info->my->forcheckapprovalstatus = 1;
        $checkorder_info->my->forcheckstatus         = 1;
        $checkorder_info->my->ma_pickorders          = "";
        $checkorder_info->my->submit_type            = $instorage_info->my->submit_type;
        $checkorder_info->my->submit_id              = $instorage_info->my->submit_id;
        $checkorder_info->my->receipt_type           = $instorage_info->my->receipt_type;
        $checkorder_info->my->receipt_id             = $instorage_info->my->receipt_id;
        $checkorder_info->my->execute                = $profileid;
        $checkorder_info->my->submitnumber           = $purchasenum;
        $checkorder_info->my->rechecknumber          = $purchasenum;
        $checkorder_info->my->sendnumber             = $purchasenum;
        $checkorder_info->my->instoragenumber        = $purchasenum;
        $checkorder_info->my->deleted                = '0';
        $checkorder_info->save("ma_checkorders");

        $saledetails          = XN_Query::create("Content")
            ->tag("ma_borrowdetails")
            ->filter("type", "eic", "ma_borrowdetails")
            ->filter("my.record", "=", $ma_borrowordersout)
            ->filter("my.deleted", "=", "0")
            ->execute();
        foreach ($saledetails as $detail_info)
        {
            $products_info          = XN_Content::load($detail_info->my->ma_products, "ma_products");

            $checkdetail                             = XN_Content::create("ma_checkdetails", "", false);
            $checkdetail->my->ma_borrowordersout     = $ma_borrowordersout;
            $checkdetail->my->ma_borrowordersin      = $ma_borrowordersin;
            $checkdetail->my->backnumber             = 0;
            $checkdetail->my->itemcode               = $products_info->my->itemcode;
            $checkdetail->my->refusenumber           = '0';
            $checkdetail->my->createnew              = '0';
            $checkdetail->my->instorestatus          = '1';
            $checkdetail->my->checkstatus            = '1';
            $checkdetail->my->forcheckapprovalstatus = '1';
            $checkdetail->my->forcheckstatus         = '1';
            $checkdetail->my->sendnumber             = $detail_info->my->number;
            $checkdetail->my->instoragenumber        = $detail_info->my->number;
            $checkdetail->my->submitnumber           = $detail_info->my->number;
            $checkdetail->my->rechecknumber          = $detail_info->my->number;
            $checkdetail->my->barcode                = $products_info->my->barcode;
            $checkdetail->my->guige                  = $detail_info->my->guige;
            $checkdetail->my->unit                   = $detail_info->my->unit;
            $checkdetail->my->registercode           = $detail_info->my->registercode;
            $checkdetail->my->ma_products            = $detail_info->my->ma_products;
            $checkdetail->my->ma_products_no         = $detail_info->my->ma_products_no;
            $checkdetail->my->productname            = $detail_info->my->productname;
            $checkdetail->my->factorys               = $detail_info->my->factorys;
            $checkdetail->my->factorys_name          = $detail_info->my->factorys_name;
            $checkdetail->my->record                 = $checkorder_info->id;
            $checkdetail->my->batch_info             = "";
            $checkdetail->my->deleted                = '0';
            $checkdetail->save("ma_checkdetails");

            $query=XN_Query::create("Content")
                ->tag("wcs_warehouselocationsproducts")
                ->filter("type","eic","wcs_warehouselocationsproducts")
                ->filter("my.productid","=",$detail_info->my->ma_products)
                ->filter("my.deleted","=","0")
                ->order('published',XN_Order::ASC)
                ->end(-1)
                ->execute();
            $warehouse = array();
            foreach($query as $queryinfo)
            {
                $warehouse[] = $queryinfo->my->record;
            }
            $warehouseinfo = "";
            if(count($warehouse)>0){
                foreach(array_chunk($warehouse,50,true) as $thunk){
                    $whl = XN_Content::loadMany($thunk,"wcs_warehouselocations");
                    foreach($whl as $item){
                        if($warehouseinfo != ""){
                            $warehouseinfo .= "<br>";
                        }
                        $warehouseinfo .= $item->my->barcode;
                    }
                }
            }
            if($warehouseinfo==""){
                $warehouseinfo="<未设置>";
            }

            if ($isnew === '1'){
                $num           = $detail_info->my->sendnumber;
            }else{
                $num           = $detail_info->my->number;
            }
            $saleoutinfo[] = ['suppliername' =>$suppliername,
                              'productname'   => $detail_info->my->productname,
                              'barcode'       => $products_info->my->barcode,
                              'itemcode'      => $products_info->my->itemcode,
                              'guige'         => $detail_info->my->guige,
                              'unit'          => $detail_info->my->unit,
                              'registercode'  => $detail_info->my->registercode,
                              'factorys_name' => $detail_info->my->factorys_name,
                              'number'        => $num,
                              'id'            => $detail_info->id,
                              'warehouseinfo'=>$warehouseinfo,
            ];
            $totalnum += $num;
        }
    }
    require_once('Smarty_setup.php');
    $smarty = new platform_Smarty;
    $action = strtolower(basename(__FILE__, ".php"));
    $smarty->assign("ma_saleorders_no", $ma_saleorders_no);
    $smarty->assign("record", $record);
    $smarty->assign("incheckstorage", $saleoutinfo);
    $smarty->assign("totalnum", $totalnum);
    $smarty->assign("suppliername", $suppliername);
    $smarty->assign("profileid", $profileid);
    if ($isnew === '1')
    {
        //减法
        $smarty->display('sa_borrowincheckstoragebysub.tpl');
    }
    else
    {
        //加法
        $smarty->display($action.'.tpl');
    }
?>